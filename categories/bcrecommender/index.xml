<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>BCRecommender on Yanir Seroussi | Data science and beyond</title><link>https://yanirs.github.io/yanirseroussi.com/categories/bcrecommender/</link><description>Recent content in BCRecommender on Yanir Seroussi | Data science and beyond</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><copyright>&amp;copy; [Yanir Seroussi](https://yanirseroussi.com/about/)&amp;nbsp;&amp;nbsp;|</copyright><lastBuildDate>Wed, 04 Nov 2015 03:53:18 +0000</lastBuildDate><atom:link href="https://yanirs.github.io/yanirseroussi.com/categories/bcrecommender/index.xml" rel="self" type="application/rss+xml"/><item><title>Migrating a simple web application from MongoDB to Elasticsearch</title><link>https://yanirs.github.io/yanirseroussi.com/2015/11/04/migrating-a-simple-web-application-from-mongodb-to-elasticsearch/</link><pubDate>Wed, 04 Nov 2015 03:53:18 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2015/11/04/migrating-a-simple-web-application-from-mongodb-to-elasticsearch/</guid><description>Bandcamp Recommender (BCRecommender) is a web application that serves music recommendations from Bandcamp. I recently switched BCRecommender&amp;rsquo;s data store from MongoDB to Elasticsearch. This has made it possible to offer a richer search experience to users at a similar cost. This post describes the migration process and discusses some of the advantages and disadvantages of using Elasticsearch instead of MongoDB.
Motivation: Why swap MongoDB for Elasticsearch? I&amp;rsquo;ve written a few posts in the past on BCRecommender&amp;rsquo;s design and implementation.</description></item><item><title>Goodbye, Parse.com</title><link>https://yanirs.github.io/yanirseroussi.com/2015/07/31/goodbye-parse-com/</link><pubDate>Fri, 31 Jul 2015 03:29:50 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2015/07/31/goodbye-parse-com/</guid><description>Over the past year, I&amp;rsquo;ve been using Parse‘s free backend-as-a-service and web hosting to serve BCRecommender (music recommendation service) and Price Dingo (now-closed shopping comparison engine). The main lesson: You get what you pay for. Despite some improvements, Parse remains very unreliable, and any time saved by using their APIs and SDKs tends to be offset by having to work around the restrictions of their sandboxed environment. This post details some of the issues I faced and the transition away from the service.</description></item><item><title>SEO: Mostly about showing up?</title><link>https://yanirs.github.io/yanirseroussi.com/2014/12/15/seo-mostly-about-showing-up/</link><pubDate>Mon, 15 Dec 2014 04:25:25 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/12/15/seo-mostly-about-showing-up/</guid><description>In previous posts about getting traction for my Bandcamp recommendations project (BCRecommender), I mentioned search engine optimisation (SEO) as one of the promising traction channels. Unfortunately, early efforts yielded negligible traffic – most new visitors came from referrals from blogs and Twitter. It turns out that the problem was not showing up for the SEO game: most of BCRecommender&amp;rsquo;s pages were blocked for crawling via robots.txt because I was worried that search engines (=Google) would penalise the website for thin/duplicate content.</description></item><item><title>BCRecommender Traction Update</title><link>https://yanirs.github.io/yanirseroussi.com/2014/11/05/bcrecommender-traction-update/</link><pubDate>Wed, 05 Nov 2014 02:29:35 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/11/05/bcrecommender-traction-update/</guid><description>This is the fifth part of a series of posts on my Bandcamp recommendations (BCRecommender) project. Check out previous posts on the general motivation behind this project, the system’s architecture, the recommendation algorithms, and initial traction planning. In a previous post, I discussed my plans to apply the Bullseye framework from the Traction Book to BCRecommender, my Bandcamp recommendations project. In that post, I reviewed the 19 traction channels described in the book, and decided to focus on the three most promising ones: blogger outreach, search engine optimisation (SEO), and content marketing.</description></item><item><title>Applying the Traction Book’s Bullseye framework to BCRecommender</title><link>https://yanirs.github.io/yanirseroussi.com/2014/09/24/applying-the-traction-books-bullseye-framework-to-bcrecommender/</link><pubDate>Wed, 24 Sep 2014 04:57:39 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/09/24/applying-the-traction-books-bullseye-framework-to-bcrecommender/</guid><description>This is the fourth part of a series of posts on my Bandcamp recommendations (BCRecommender) project. Check out previous posts on the general motivation behind this project, the system's architecture, and the recommendation algorithms. Having used BCRecommender to find music I like, I&amp;rsquo;m certain that other Bandcamp fans would like it too. It could probably be extended to attract a wider audience of music lovers, but for now, just getting feedback from Bandcamp fans would be enough.</description></item><item><title>Bandcamp recommendation and discovery algorithms</title><link>https://yanirs.github.io/yanirseroussi.com/2014/09/19/bandcamp-recommendation-and-discovery-algorithms/</link><pubDate>Fri, 19 Sep 2014 14:26:55 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/09/19/bandcamp-recommendation-and-discovery-algorithms/</guid><description>This is the third part of a series of posts on my Bandcamp recommendations (BCRecommender) project. Check out the first part for the general motivation behind this project and the second part for the system architecture. The main goal of the BCRecommender project is to help me find music I like. This post discusses the algorithmic approaches I took towards that goal. I&amp;rsquo;ve kept the descriptions at a fairly high-level, without getting too much into the maths, as all recommendation algorithms essentially try to model simple intuition.</description></item><item><title>Building a recommender system on a shoestring budget (or: BCRecommender part 2 – general system layout)</title><link>https://yanirs.github.io/yanirseroussi.com/2014/09/07/building-a-recommender-system-on-a-shoestring-budget/</link><pubDate>Sun, 07 Sep 2014 10:48:44 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/09/07/building-a-recommender-system-on-a-shoestring-budget/</guid><description>This is the second part of a series of posts on my BCRecommender – personalised Bandcamp recommendations project. Check out the first part for the general motivation behind this project.
BCRecommender is a hobby project whose main goal is to help me find music I like on Bandcamp. Its secondary goal is to serve as a testing ground for ideas I have and things I&amp;rsquo;d like to explore.
One question I&amp;rsquo;ve been wondering about is: how much money does one need to spend on infrastructure for a simple web-based product before it reaches meaningful traffic?</description></item><item><title>Building a Bandcamp recommender system (part 1 – motivation)</title><link>https://yanirs.github.io/yanirseroussi.com/2014/08/30/building-a-bandcamp-recommender-system-part-1-motivation/</link><pubDate>Sat, 30 Aug 2014 08:11:38 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/08/30/building-a-bandcamp-recommender-system-part-1-motivation/</guid><description>I&amp;rsquo;ve been a Bandcamp user for a few years now. I love the fact that they pay out a significant share of the revenue directly to the artists, unlike other services. In addition, despite the fact that fans may stream all the music for free and even easily rip it, almost $80M were paid out to artists through Bandcamp to date (including almost $3M in the last month) – serving as strong evidence that the traditional music industry&amp;rsquo;s fight against piracy is a waste of resources and time.</description></item></channel></rss>