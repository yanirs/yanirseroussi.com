<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>music on Yanir Seroussi | Data science and beyond</title><link>https://yanirs.github.io/yanirseroussi.com/tags/music/</link><description>Recent content in music on Yanir Seroussi | Data science and beyond</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><copyright>&amp;copy; [Yanir Seroussi](https://yanirseroussi.com/about/)&amp;nbsp;&amp;nbsp;|</copyright><lastBuildDate>Wed, 05 Nov 2014 02:29:35 +0000</lastBuildDate><atom:link href="https://yanirs.github.io/yanirseroussi.com/tags/music/index.xml" rel="self" type="application/rss+xml"/><item><title>BCRecommender Traction Update</title><link>https://yanirs.github.io/yanirseroussi.com/2014/11/05/bcrecommender-traction-update/</link><pubDate>Wed, 05 Nov 2014 02:29:35 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/11/05/bcrecommender-traction-update/</guid><description>This is the fifth part of a series of posts on my Bandcamp recommendations (BCRecommender) project. Check out previous posts on the general motivation behind this project, the system’s architecture, the recommendation algorithms, and initial traction planning. In a previous post, I discussed my plans to apply the Bullseye framework from the Traction Book to BCRecommender, my Bandcamp recommendations project. In that post, I reviewed the 19 traction channels described in the book, and decided to focus on the three most promising ones: blogger outreach, search engine optimisation (SEO), and content marketing.</description></item><item><title>Bandcamp recommendation and discovery algorithms</title><link>https://yanirs.github.io/yanirseroussi.com/2014/09/19/bandcamp-recommendation-and-discovery-algorithms/</link><pubDate>Fri, 19 Sep 2014 14:26:55 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/09/19/bandcamp-recommendation-and-discovery-algorithms/</guid><description>This is the third part of a series of posts on my Bandcamp recommendations (BCRecommender) project. Check out the first part for the general motivation behind this project and the second part for the system architecture. The main goal of the BCRecommender project is to help me find music I like. This post discusses the algorithmic approaches I took towards that goal. I&amp;rsquo;ve kept the descriptions at a fairly high-level, without getting too much into the maths, as all recommendation algorithms essentially try to model simple intuition.</description></item><item><title>Building a Bandcamp recommender system (part 1 – motivation)</title><link>https://yanirs.github.io/yanirseroussi.com/2014/08/30/building-a-bandcamp-recommender-system-part-1-motivation/</link><pubDate>Sat, 30 Aug 2014 08:11:38 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/08/30/building-a-bandcamp-recommender-system-part-1-motivation/</guid><description>I&amp;rsquo;ve been a Bandcamp user for a few years now. I love the fact that they pay out a significant share of the revenue directly to the artists, unlike other services. In addition, despite the fact that fans may stream all the music for free and even easily rip it, almost $80M were paid out to artists through Bandcamp to date (including almost $3M in the last month) – serving as strong evidence that the traditional music industry&amp;rsquo;s fight against piracy is a waste of resources and time.</description></item></channel></rss>