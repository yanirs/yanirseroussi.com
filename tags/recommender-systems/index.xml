<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>recommender systems on Yanir Seroussi | Data science and beyond</title><link>https://yanirs.github.io/yanirseroussi.com/tags/recommender-systems/</link><description>Recent content in recommender systems on Yanir Seroussi | Data science and beyond</description><generator>Hugo -- gohugo.io</generator><language>en-au</language><copyright>&amp;copy; [Yanir Seroussi](https://yanirseroussi.com/about/)&amp;nbsp;&amp;nbsp;|</copyright><lastBuildDate>Fri, 02 Oct 2015 05:25:57 +0000</lastBuildDate><atom:link href="https://yanirs.github.io/yanirseroussi.com/tags/recommender-systems/index.xml" rel="self" type="application/rss+xml"/><item><title>The wonderful world of recommender systems</title><link>https://yanirs.github.io/yanirseroussi.com/2015/10/02/the-wonderful-world-of-recommender-systems/</link><pubDate>Fri, 02 Oct 2015 05:25:57 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2015/10/02/the-wonderful-world-of-recommender-systems/</guid><description>I recently gave a talk about recommender systems at the Data Science Sydney meetup (the slides are available here). This post roughly follows the outline of the talk, expanding on some of the key points in non-slide form (i.e., complete sentences and paragraphs!). The first few sections give a broad overview of the field and the common recommendation paradigms, while the final part is dedicated to debunking five common myths about recommender systems.</description></item><item><title>Applying the Traction Book’s Bullseye framework to BCRecommender</title><link>https://yanirs.github.io/yanirseroussi.com/2014/09/24/applying-the-traction-books-bullseye-framework-to-bcrecommender/</link><pubDate>Wed, 24 Sep 2014 04:57:39 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/09/24/applying-the-traction-books-bullseye-framework-to-bcrecommender/</guid><description>This is the fourth part of a series of posts on my Bandcamp recommendations (BCRecommender) project. Check out previous posts on the general motivation behind this project, the system's architecture, and the recommendation algorithms. Having used BCRecommender to find music I like, I&amp;rsquo;m certain that other Bandcamp fans would like it too. It could probably be extended to attract a wider audience of music lovers, but for now, just getting feedback from Bandcamp fans would be enough.</description></item><item><title>Bandcamp recommendation and discovery algorithms</title><link>https://yanirs.github.io/yanirseroussi.com/2014/09/19/bandcamp-recommendation-and-discovery-algorithms/</link><pubDate>Fri, 19 Sep 2014 14:26:55 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/09/19/bandcamp-recommendation-and-discovery-algorithms/</guid><description>This is the third part of a series of posts on my Bandcamp recommendations (BCRecommender) project. Check out the first part for the general motivation behind this project and the second part for the system architecture. The main goal of the BCRecommender project is to help me find music I like. This post discusses the algorithmic approaches I took towards that goal. I&amp;rsquo;ve kept the descriptions at a fairly high-level, without getting too much into the maths, as all recommendation algorithms essentially try to model simple intuition.</description></item><item><title>Building a recommender system on a shoestring budget (or: BCRecommender part 2 – general system layout)</title><link>https://yanirs.github.io/yanirseroussi.com/2014/09/07/building-a-recommender-system-on-a-shoestring-budget/</link><pubDate>Sun, 07 Sep 2014 10:48:44 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/09/07/building-a-recommender-system-on-a-shoestring-budget/</guid><description>This is the second part of a series of posts on my BCRecommender – personalised Bandcamp recommendations project. Check out the first part for the general motivation behind this project.
BCRecommender is a hobby project whose main goal is to help me find music I like on Bandcamp. Its secondary goal is to serve as a testing ground for ideas I have and things I&amp;rsquo;d like to explore.
One question I&amp;rsquo;ve been wondering about is: how much money does one need to spend on infrastructure for a simple web-based product before it reaches meaningful traffic?</description></item><item><title>Building a Bandcamp recommender system (part 1 – motivation)</title><link>https://yanirs.github.io/yanirseroussi.com/2014/08/30/building-a-bandcamp-recommender-system-part-1-motivation/</link><pubDate>Sat, 30 Aug 2014 08:11:38 +0000</pubDate><guid>https://yanirs.github.io/yanirseroussi.com/2014/08/30/building-a-bandcamp-recommender-system-part-1-motivation/</guid><description>I&amp;rsquo;ve been a Bandcamp user for a few years now. I love the fact that they pay out a significant share of the revenue directly to the artists, unlike other services. In addition, despite the fact that fans may stream all the music for free and even easily rip it, almost $80M were paid out to artists through Bandcamp to date (including almost $3M in the last month) – serving as strong evidence that the traditional music industry&amp;rsquo;s fight against piracy is a waste of resources and time.</description></item></channel></rss>